rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /groups/{groupsId} {
      allow read: if isMember(resource) || isAdmin(resource);
      allow update, delete: if isAdmin(resource);
      allow create: if isAdmin(request.resource);
    }

    match /events/{eventId} {
      allow read: if isMember(resource) || isAdmin(resource) || isInGroup(resource) || isInGroupAdmin(resource);
      allow update, delete: if isAdmin(resource) || isInGroupAdmin(resource);
      allow create: if isAdmin(request.resource);
    }
    
    function isSignedIn() {
        return request.auth != null;
      }

      function isMember(resource) {
        return isSignedIn() &&
          request.auth.uid in resource.data.members
      }

      function isAdmin(resource) {
        return isSignedIn() &&
          request.auth.uid in resource.data.admins
      }

      function isInGroup(resource) {
        return request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.group)).data.members
      }

      function isInGroupAdmin(resource) {
        return request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.group)).data.admin
      }
  }
}